/* Autogenerated with kurento-module-creator */

#include "RecorderModuleOpenCVImpl.hpp"
#include <KurentoException.hpp>

namespace kurento
{
namespace module
{
namespace recordermodule
{

RecorderModuleOpenCVImpl::RecorderModuleOpenCVImpl () : path("/home/images"), filename("test") 
{
}

/*
 * This function will be called with each new frame. mat variable
 * contains the current frame. You should insert your image processing code
 * here. Any changes in mat, will be sent through the Media Pipeline.
 */
void RecorderModuleOpenCVImpl::process (cv::Mat &mat)
{
    std::string x = this->path + "/" + this->filename + "-" + std::to_string(this->number++) + ".png";

    auto writed = cv::imwrite(x, mat);
    try
    {
      if (writed) {
        RecorderModuleFrameSaved event(OpenCVProcess::getSharedPtr(), RecorderModuleFrameSaved::getName(), x);
        signalRecorderModuleFrameSaved(event);
      } 
    }
    catch(std::bad_weak_ptr& e)
    {
    }
}


std::string RecorderModuleOpenCVImpl::getPath ()
{
  return this->path;
}

void RecorderModuleOpenCVImpl::setPath (const std::string &path)
{
  this->path = path;
}

std::string RecorderModuleOpenCVImpl::getFilename ()
{
  return this->filename;
}

void RecorderModuleOpenCVImpl::setFilename (const std::string &filename)
{
  this->filename = filename; 
}


} /* recordermodule */
} /* module */
} /* kurento */
